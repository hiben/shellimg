#!/bin/sh

# shellimg 1.3
# Shell-based image display for xterm-256-color compatible terminals
# Copyright 2011 Hendrik Iben - hendrik <dot> iben <at> googlemail <dot> com
# 
# Dependencies
#  A compatible shell, tested with:
#    Bash 4.1.9
#    KornShell 93t+
#  ImageMagick (identify, convert)
#  netpbm (pnmtopnm)
#  ncurses (tput)
#  coreutils (basename) 
#  a terminal that understands xterm-256 color escape sequences
#    (well, only for viewing... you can still pipe...)
#
# Changes in 1.3
#  - renamed to shellimg (was: bashimg)
#  - added error checking
#  - some syntax simplifications
# Changes in 1.2
#  - fixed small syntax glitch to make this script run with ksh
# Changes in 1.1
#  - now trying to find temporary directory for files
#
# Bugs:
# Some images might get converted to a type 1 or 2 PNM image
# resulting in this script to quit with an error message.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

if [ -z "$1" ] ; then
  echo "Usage: $(basename $0) <imagefile>"
  echo "  global variables for control:"
  echo "  PIXEL     - what is printed for each pixel (default: '  ' (two spaces))"
  echo "  COLUMNS   - specify terminal width (default: queried via tput)"
  echo "  DO_RESIZE - resize image if terminal too small (default: 1)"
  echo "  VERBOSE   - some info on stderr (default: 0)"
  echo "  NO_KSH    - if set (!=0) do not try to run the script with KornShell (if not already)"
  echo ""
  echo "  Please note: this script is really slow in bash; use ksh for speed"
  echo ""
  echo "  This script is distributed under the terms of the GPLv3 license"
  echo "  See top of script for details"
  exit 1
fi

if [ -z "$COLUMNS" ] ; then
  COLUMNS=$(tput cols)
fi

PIXEL=${PIXEL:-"  "}
MAXWIDTH=$(( $COLUMNS / ${#PIXEL} ))

if [ -z "$DO_RESIZE" ] ; then
  DO_RESIZE=1
else
  if [ $DO_RESIZE != "0" ] ; then
    DO_RESIZE="1"
  fi
fi

if [ -n "$VERBOSE" ] && [ $VERBOSE = "0" ] ; then
  unset VERBOSE
fi

if [ -n "$NO_KSH" ] && [ $NO_KSH = "0" ] ; then
  unset NO_KSH
fi

if [ -z "${NO_KSH}" ] && [ -z "${KSH_VERSION}" ] ; then
  KSH=$(which ksh 2>/dev/null)
  if [ $? != 0 ] ; then
    unset KSH
  fi
  if [ -n "$KSH" ] &&[ -x "$KSH" ] ; then
    export PIXEL=${PIXEL}
    export COLUMNS=${COLUMNS}
    export DO_RESIZE=${DO_RESIZE}
    if [ -n "$VERBOSE" ] ; then
      export VERBOSE=${VERBOSE}
    fi
    exec $KSH $0 "$1"
  fi
fi

# try to find location to put temporary files
TD=$TMPDIR

if [ -z "$TD" ] ; then
  TD=$TEMP
fi

if [ -z "$TD" ] ; then
  TD=$TMP
fi

TMPDIR=$TD

if [ -z "$TMPDIR" ] ; then
  TMPDIR="/tmp"
fi

color_value_index() {
  if [ $1 -gt 235 ] ; then echo 5; return; fi
  if [ $1 -gt 195 ] ; then echo 4; return; fi
  if [ $1 -gt 155 ] ; then echo 3; return; fi
  if [ $1 -gt 115 ] ; then echo 2; return; fi
  if [ $1 -gt 45 ] ; then echo 1; return; fi
  echo 0 
}

abs() {
  if [ $1 -lt 0 ] ; then echo $(( 0 - $1 )); else echo $1; fi
}

is_grey() {
  DRG=$(abs $(( $1 - $2 )))
  DRB=$(abs $(( $1 - $3 )))
  DGB=$(abs $(( $2 - $3 )))

  if [ $DRG -lt 20 ] && [ $DRB -lt 20 ] && [ $DGB -lt 20 ] ; then
    echo 1
  else
    echo 0
  fi
}

grey_index() {
  GCOL=$(( ( $1 + $2 + $3 ) / 3 ))
  if [ $GCOL -lt 8 ] ; then
    echo 16
  else
    IDX=$(( (( $GCOL - 8) * 23) / 230 ))
    if [ $IDX -gt 23 ] ; then
      echo 231
    else
      echo $(( 232 + $IDX ))
    fi
  fi
}

color_index() {
  if [ $(is_grey $1 $2 $3) = 1 ] ; then
    grey_index $1 $2 $3
  else
    RINDEX=$(color_value_index $1)
    GINDEX=$(color_value_index $2)
    BINDEX=$(color_value_index $3)

    echo $(( 16 + $RINDEX * 36 + $GINDEX * 6 + $BINDEX ))
  fi
}

if [ ! -f "$1" ] ; then
  echo "No such file: $1" >&2
  exit 1
fi

TMPFILE_RAW=${TMPDIR}/$(basename $0).$$.raw.pnm
TMPFILE=${TMPDIR}/$(basename $0).$$.pnm
IMGREALDIM=$(identify -format "%w %h" "$1" 2>/dev/null)

if [ $? != 0 ] ; then
  echo "Image dimensions could not be determined. Stopping..." >&2
  exit 1
fi

for RDIM in $IMGREALDIM; do
  if [ -z "$REALWIDTH" ] ; then REALWIDTH=$RDIM; continue; fi
  if [ -z "$REALHEIGHT" ] ; then REALHEIGHT=$RDIM; fi
done

RESIZEX=$REALWIDTH

if [ $DO_RESIZE ] && [ $REALWIDTH -gt $MAXWIDTH ] ; then
  if [ -n "$VERBOSE" ] ; then
    echo "Resizing ${REALWIDTH}x${REALHEIGHT} to new width ${MAXWIDTH}..." >&2
  fi
  RESIZEX=$MAXWIDTH
fi

convert "$1" -resize ${RESIZEX}x "$TMPFILE_RAW" 2>/dev/null
if [ $? != 0 ] ; then
  echo "Image could not be converted. Stoping..." >&2
  exit 1
fi
pnmtopnm -plain "$TMPFILE_RAW" > "$TMPFILE"
if [ $? != 0 ] ; then
  echo "Image could not be made plain. Stoping..." >&2
  rm ${TMPFILE_RAW}
  exit 1
fi

rm "$TMPFILE_RAW"

HEADER=""
DIMS=""
MAX=""
HPOS=0
CVIDX=0
IMGLINE=""

while read LINE; do
  if [ ${#LINE} = 0 ] || [ ${LINE:0:1} = "#" ] ; then
    continue
  fi
  if [ -z "$HEADER" ] ; then
    HEADER=$LINE
    if [ "$HEADER" != "P3" ] ; then
      echo "Unsupported format: $HEADER"
      exit 1
    fi
    continue
  fi
  if [ -z "$DIMS" ]; then
    DIMS=$LINE
    for a in $DIMS; do
      if [ -z "$WIDTH" ] ; then WIDTH=$a; continue; fi
      if [ -z "$HEIGHT" ] ; then HEIGHT=$a; fi
    done
    if [ -n "$VERBOSE" ] ; then
      echo "Dimensions: ${WIDTH}x${HEIGHT}" >&2
    fi
    continue
  fi
  if [ -z "$MAX" ] ; then
    MAX=$LINE
    if [ -n "$VERBOSE" ] ; then
      echo "Max: ${MAX}" >&2
    fi
    continue
  fi
  for CV in $LINE; do
    if [ $MAX != 255 ] ; then
      CV=$(( ($CV * 255) / $MAX ))
    fi
    case $CVIDX in
      '0')
        R=$CV
      ;;
      '1')
        G=$CV
      ;;
      '2')
        B=$CV
      ;;
    esac
    CVIDX=$(( $CVIDX + 1))
    if [ $CVIDX -gt 2 ]; then
      CVIDX=0
      COLOR=$(color_index $R $G $B)
      IMGLINE="${IMGLINE}\\033[48;5;${COLOR}m${PIXEL}"
      HPOS=$(( $HPOS + 1))
      if [ $HPOS == $WIDTH ] ; then
        HPOS=0
        echo -ne "${IMGLINE}\033[48;5;0m\n"
        IMGLINE=""
      fi
    fi
  done
done < "$TMPFILE"

rm "$TMPFILE"
